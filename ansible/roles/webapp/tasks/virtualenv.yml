# Manage virtualenvs based on current code.
# The "current" virtualenv is the one currently being used.
# The "previous" virtualenv is the one that used prior to the most recent
# deployment.
#
# When deploying, we move the "current" virtualenv to "previous" and create
# a new "current" virtualenv. This allows us to rollback to a previous
# deployment if necessary.

# Install a number of important packages:
# - python-dev to allow us to build Python packages
# - python-pip to allow us to install Python packages
# - python-virtualenv to bootstrap a virtualenv when first provisioning
#   a server
- name: install python packages
  apt: cache_valid_time={{ apt_cache_seconds }}
       name={{ item }}
       state=latest
       update_cache=yes
  become: true
  with_items:
    - python3-dev
    - python3-pip
    - python3-virtualenv
    - python3-venv

- name: manually figure out latest Git commit
  command: git rev-parse HEAD chdir={{ source_directory }}
  register: git_status

- name: determine if virtualenv with this Git hash exists
  stat: path={{ virtualenv_folder_root }}/{{ git_status.stdout }}
  register: venv_dir

- name: create virtualenv if necessary
  shell: python3 -m venv {{ virtualenv_folder_root }}/{{ git_status.stdout }}
  when: venv_dir.stat.isdir is not defined
  notify:
    - delete other virtualenvs
    - restart uwsgi

- name: move old "current" symlink to "previous" if virtualenv has changed
  shell: mv
        {{ virtualenv_folder_root }}/current
        {{ virtualenv_folder_root }}/previous
  when: venv_dir.stat.isdir is not defined
  ignore_errors: yes

# To make things easier in Ansible, we symlink the current virtualenv to
# "current".
- name: use symlink for easier virtualenv management
  file: state=link
        path={{ virtualenv_folder_root }}/current
        src={{ virtualenv_folder_root }}/{{ git_status.stdout }}

# The version of pip currently installed in the virtualenv will be old
# the first time we run this, because it will be from the python-pip
# package and not from PyPI. So that we don't use an ancient version
# of pip, let's manually update the copy in the virtualenv.
- name: install latest version of pip
  shell: "{{ virtualenv_folder_root }}/current/bin/pip install --upgrade pip"

# We don't use Ansible's pip module here so that we can use the virtualenv's
# copy of pip that we just updated, instead of the system pip.
- name: update virtualenv with requirements
  shell: >
    {{ virtualenv_folder_root }}/current/bin/pip
    install -r {{ source_directory }}/requirements/{{ environment_type }}.txt
    --upgrade
  notify:
    - restart uwsgi
